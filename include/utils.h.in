/* Jakopter
 * Copyright Â© 2015 ALF@INRIA
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef JAKOPTER_UTILS_H
#define JAKOPTER_UTILS_H

#ifdef __MACH__
#include <mach/clock.h>
#include <mach/mach.h>
#endif

/* C-style public-like keyword */
#if defined(__GNUC__) && __GNUC__ >= 4
#define JAKO_EXPORT __attribute__ ((visibility("default")))
#else
#define JAKO_EXPORT
#endif

#cmakedefine JAKOPTER_VERSION_MAJOR @JAKOPTER_VERSION_MAJOR@
#cmakedefine JAKOPTER_VERSION_MINOR @JAKOPTER_VERSION_MINOR@
#cmakedefine JAKOPTER_VERSION_PATCH @JAKOPTER_VERSION_PATCH@

#cmakedefine CMAKE_INSTALL_DATADIR "@CMAKE_INSTALL_DATADIR@"

//TODO: switch to the font installed on the system if available
#define FONT_PATH "@CMAKE_SOURCE_DIR@/resources/FreeSans.ttf"

/* Max number of digit into an integer plus the sign and \0. */
#define INT_LEN     13
/* 2 integers plus the dot and \0*/
#define TSTAMP_LEN  2*INT_LEN+2
/* Max number of digit we use in a float (nb digits of an int + 6 decimal digits) and \0*/
#define FLOAT_LEN INT_LEN+6

/* OS X does not have clock_gettime, use clock_get_time*/
#ifdef __MACH__
#define CLOCK_REALTIME 0
#define CLOCK_MONOTONIC 0
typedef int clockid_t;
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
	clock_serv_t cclock;
	mach_timespec_t mts;
	host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);
	int ret = clock_get_time(cclock, &mts);
	mach_port_deallocate(mach_task_self(), cclock);
	ts->tv_sec = mts.tv_sec;
	ts->tv_nsec = mts.tv_nsec;
	return ret;
}
#endif

#endif